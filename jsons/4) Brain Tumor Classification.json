{
  "tumorModel": {
    "code": "def tumorModel():\n    model = tf.keras.models.Sequential()\n    model.add(tf.keras.layers.Conv2D(input_shape=(200, 200, 1), activation='relu', filters=32, kernel_size=(5, 5)))\n    model.add(tf.keras.layers.MaxPool2D(pool_size=(3, 3), strides=(3, 3)))\n    model.add(tf.keras.layers.Dropout(rate=0.25))\n    model.add(tf.keras.layers.Conv2D(filters=64, kernel_size=(5, 5), activation='relu'))\n    model.add(tf.keras.layers.MaxPool2D(pool_size=(3, 3), strides=(3, 3)))\n    model.add(tf.keras.layers.Dropout(rate=0.25))\n    model.add(tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))\n    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(tf.keras.layers.Dropout(rate=0.25))\n    model.add(tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 3), activation='relu'))\n    model.add(tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(tf.keras.layers.Dropout(rate=0.25))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.Dense(512, activation='relu'))\n    model.add(tf.keras.layers.Dense(512, activation='relu'))\n    model.add(tf.keras.layers.Dense(4, activation='softmax'))\n    return model",
    "calls": [],
    "file": "trained.py",
    "breadcrumbs": "trained.py"
  },
  "on_epoch_end": {
    "code": "def on_epoch_end(self, epoch, logs={}): \n        if logs.get('accuracy') > ACC_THRESHOLD:   \n            print(\"\\nReached %2.2f%% accuracy, so stopping training!!\" % (ACC_THRESHOLD*100))   \n            self.model.stop_training = True",
    "calls": [],
    "file": "trained.py",
    "breadcrumbs": "trained.py"
  }
}